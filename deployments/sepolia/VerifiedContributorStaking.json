{
  "address": "0x8F0749708fA011343e366713966612236640c4B8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20MintBurnable",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC721",
          "name": "_stakeNFT",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokensPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NFTAlreadyStaked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTNotStaked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourNFT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Overflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingEndMustBeInTheFuture",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimableTokens",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20MintBurnable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_stakingOver",
          "type": "uint64"
        }
      ],
      "name": "setStakingEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeNFT",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x98d48f9d61e4f9b8a1bc0a965e182f24e470165fb01249c451b45eb29f75198a",
  "receipt": {
    "to": null,
    "from": "0xaF7E68bCb2Fc7295492A00177f14F59B92814e70",
    "contractAddress": "0x8F0749708fA011343e366713966612236640c4B8",
    "transactionIndex": 41,
    "gasUsed": "698590",
    "logsBloom": "0x
    "blockHash": "0xca815cd5f1ac33c0df943b2ed1d61217f63534d518694711128a177022ae650f",
    "transactionHash": "0x98d48f9d61e4f9b8a1bc0a965e182f24e470165fb01249c451b45eb29f75198a",
    "logs": [
      {
        "transactionIndex": 41,
        "blockNumber": 4753030,
        "transactionHash": "0x98d48f9d61e4f9b8a1bc0a965e182f24e470165fb01249c451b45eb29f75198a",
        "address": "0x8F0749708fA011343e366713966612236640c4B8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000044dbb18208bbfd976c3351db1fa4c6871d503c0e"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0xca815cd5f1ac33c0df943b2ed1d61217f63534d518694711128a177022ae650f"
      }
    ],
    "blockNumber": 4753030,
    "cumulativeGasUsed": "2159119",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9524c3dF8B40fbD55Eff4c6e48E4386B0Ec114F9",
    "0xD6cB52d72c6F849b24b1228f1c16FE60F68E5177",
    "3858024000000000",
    "0x44DbB18208bBFd976c3351Db1Fa4C6871d503c0E"
  ],
  "numDeployments": 1,
  "solcInputHash": "9b4aa24c3c6a845a3f4d806135a61042",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20MintBurnable\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"_stakeNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokensPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NFTAlreadyStaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTNotStaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourNFT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingEndMustBeInTheFuture\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimableTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20MintBurnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_stakingOver\",\"type\":\"uint64\"}],\"name\":\"setStakingEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeNFT\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"claim(uint256)\":{\"params\":{\"_tokenId\":\"The id of the NFT to claim tokens for.\"}},\"claimable(uint256)\":{\"params\":{\"_tokenId\":\"The id of the NFT to check claimable tokens.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setStakingEnd(uint64)\":{\"params\":{\"_stakingOver\":\"The enddate.\"}},\"stake(uint256)\":{\"params\":{\"_tokenId\":\"The id of the NFT to stake.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstake(uint256)\":{\"params\":{\"_tokenId\":\"The id of the NFT to unstake.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(uint256)\":{\"notice\":\"Claims all claimable tokens.Can be called by any wallet, but tokens will be claimed to NFT owner.\"},\"claimable(uint256)\":{\"notice\":\"Checks how much tokens are claimable.\"},\"setStakingEnd(uint64)\":{\"notice\":\"Set enddate for rewards. No new rewards are stacked up after this date.Rewards stacked up until this date can still be claimed.\"},\"stake(uint256)\":{\"notice\":\"Stakes your NFT.\"},\"unstake(uint256)\":{\"notice\":\"Unstakes your NFT.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VerifiedContributorStaking.sol\":\"VerifiedContributorStaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/IERC20MintBurnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20MintBurnable is IERC20 {\\n    /// Mints tokens to a specific account.\\n    /// @dev Should be locked behind a permission.\\n    /// @param account The account that will receive the minted tokens.\\n    /// @param amount The amount of tokens to mint.\\n    function mint(address account, uint256 amount) external;\\n\\n    /// Burns tokens from your account.\\n    /// @param amount The amount of tokens to burn.\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xbd51543bfae5ade915e9ce86e628219b56c910444ca076d6dca66ec96a39dfb6\",\"license\":\"MIT\"},\"contracts/VerifiedContributorStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IERC20MintBurnable} from \\\"./IERC20MintBurnable.sol\\\";\\n\\ncontract VerifiedContributorStaking is Ownable {\\n    uint256 public immutable tokensPerSecond;\\n    IERC20MintBurnable public immutable rewardToken;\\n    IERC721 public immutable stakeNFT;\\n    uint64 internal stakingOver = type(uint64).max;\\n\\n    mapping(uint256 => uint64) private lastClaim;\\n\\n    error NotYourNFT();\\n    error NFTAlreadyStaked();\\n    error NFTNotStaked();\\n    error StakingEndMustBeInTheFuture();\\n    error Overflow();\\n\\n    constructor(\\n        IERC20MintBurnable _rewardToken,\\n        IERC721 _stakeNFT,\\n        uint256 _tokensPerSecond,\\n        address _admin\\n    ) Ownable(_admin) {\\n        rewardToken = _rewardToken;\\n        stakeNFT = _stakeNFT;\\n        tokensPerSecond = _tokensPerSecond;\\n    }\\n\\n    /// Stakes your NFT.\\n    /// @param _tokenId The id of the NFT to stake.\\n    function stake(uint256 _tokenId) external {\\n        if (stakeNFT.ownerOf(_tokenId) != msg.sender) {\\n            revert NotYourNFT();\\n        }\\n        if (lastClaim[_tokenId] != 0) {\\n            revert NFTAlreadyStaked();\\n        }\\n\\n        lastClaim[_tokenId] = _toUint64(block.timestamp);\\n    }\\n\\n    /// Unstakes your NFT.\\n    /// @param _tokenId The id of the NFT to unstake.\\n    function unstake(uint256 _tokenId) external {\\n        if (stakeNFT.ownerOf(_tokenId) != msg.sender) {\\n            revert NotYourNFT();\\n        }\\n\\n        _claim(_tokenId);\\n\\n        lastClaim[_tokenId] = 0;\\n    }\\n\\n    /// Checks how much tokens are claimable.\\n    /// @param _tokenId The id of the NFT to check claimable tokens.\\n    function claimable(\\n        uint256 _tokenId\\n    ) public view returns (uint256 claimableTokens) {\\n        uint64 currentSeconds = _toUint64(block.timestamp);\\n        uint64 lastClaimSeconds = lastClaim[_tokenId];\\n        if (lastClaimSeconds == 0) {\\n            revert NFTNotStaked();\\n        }\\n\\n        if (currentSeconds > stakingOver) {\\n            if (lastClaimSeconds < stakingOver) {\\n                // Staking is over && havent claimed remaining tokens up until end date yet\\n                return (stakingOver - lastClaimSeconds) * tokensPerSecond;\\n            } else {\\n                // Staking is over && all leftover have been claimed\\n                return 0;\\n            }\\n        }\\n\\n        return (currentSeconds - lastClaimSeconds) * tokensPerSecond;\\n    }\\n\\n    /// Claims all claimable tokens.\\n    /// @param _tokenId The id of the NFT to claim tokens for.\\n    /// @notice Can be called by any wallet, but tokens will be claimed to NFT owner.\\n    function claim(uint256 _tokenId) external {\\n        _claim(_tokenId);\\n\\n        lastClaim[_tokenId] = _toUint64(block.timestamp);\\n    }\\n\\n    /// Set enddate for rewards. No new rewards are stacked up after this date.\\n    /// @param _stakingOver The enddate.\\n    /// @notice Rewards stacked up until this date can still be claimed.\\n    function setStakingEnd(uint64 _stakingOver) external onlyOwner {\\n        if (block.timestamp > _stakingOver) {\\n            revert StakingEndMustBeInTheFuture();\\n        }\\n\\n        stakingOver = _stakingOver;\\n    }\\n\\n    /// Safecast uint256 to uint64.\\n    /// @param value The uint256 to cast.\\n    function _toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert Overflow();\\n        }\\n        return uint64(value);\\n    }\\n\\n    /// Mints claimable tokens to the NFT owner.\\n    /// @param _tokenId The NFT to claim the tokens for.\\n    /// @dev Due to gas optimization this does not update lastClaim, IS SHOULD ALWAYS BE UPDATED.\\n    function _claim(uint256 _tokenId) internal {\\n        rewardToken.mint(stakeNFT.ownerOf(_tokenId), claimable(_tokenId));\\n    }\\n}\\n\",\"keccak256\":\"0x91f1816c255634779020fcda25ceeea51db5129aa076891cbbfeb49520b881f0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405260008054600160a01b600160e01b031916600160a01b600160e01b0317905534801561002f57600080fd5b50604051610cf9380380610cf983398101604081905261004e9161010b565b806001600160a01b03811661007d57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b610086816100a3565b50506001600160a01b0392831660a052911660c052608052610160565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461010857600080fd5b50565b6000806000806080858703121561012157600080fd5b845161012c816100f3565b602086015190945061013d816100f3565b604086015160608701519194509250610155816100f3565b939692955090935050565b60805160a05160c051610b406101b9600039600081816101a201528181610257015281816104a001526107e60152600081816101ef01526107bc01526000818161010e0152818161067101526106e60152610b406000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80638da5cb5b11610081578063d1d58b251161005b578063d1d58b25146101c4578063f2fde38b146101d7578063f7c618c1146101ea57600080fd5b80638da5cb5b1461014b578063a694fc3a1461018a578063b48509e61461019d57600080fd5b80633e10e551116100b25780633e10e551146100f65780634d8d9e9214610109578063715018a61461014357600080fd5b80632e17de78146100ce578063379607f5146100e3575b600080fd5b6100e16100dc3660046109f0565b610211565b005b6100e16100f13660046109f0565b61034e565b6100e1610104366004610a09565b6103a7565b6101307f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100e1610446565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161013a565b6100e16101983660046109f0565b61045a565b6101657f000000000000000000000000000000000000000000000000000000000000000081565b6101306101d23660046109f0565b6105a8565b6100e16101e5366004610a5c565b61070f565b6101657f000000000000000000000000000000000000000000000000000000000000000081565b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101829052339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa15801561029e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c29190610a79565b73ffffffffffffffffffffffffffffffffffffffff161461030f576040517f4ab4e95e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61031881610778565b600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000169055565b61035781610778565b610360426108e0565b60009182526001602052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff909216919091179055565b6103af610928565b8067ffffffffffffffff164211156103f3576040517fe00c687700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805467ffffffffffffffff90921674010000000000000000000000000000000000000000027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b61044e610928565b610458600061097b565b565b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101829052339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa1580156104e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050b9190610a79565b73ffffffffffffffffffffffffffffffffffffffff1614610558576040517f4ab4e95e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526001602052604090205467ffffffffffffffff1615610357576040517f9c96118800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806105b4426108e0565b60008481526001602052604081205491925067ffffffffffffffff9091169081900361060c576040517fda70723f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005467ffffffffffffffff74010000000000000000000000000000000000000000909104811690831611156106e45760005467ffffffffffffffff74010000000000000000000000000000000000000000909104811690821610156106da576000547f0000000000000000000000000000000000000000000000000000000000000000906106be90839074010000000000000000000000000000000000000000900467ffffffffffffffff16610ac5565b67ffffffffffffffff166106d29190610aed565b949350505050565b5060009392505050565b7f00000000000000000000000000000000000000000000000000000000000000006106be8284610ac5565b610717610928565b73ffffffffffffffffffffffffffffffffffffffff811661076c576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b6107758161097b565b50565b6040517f6352211e0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116916340c10f19917f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa15801561082d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108519190610a79565b61085a846105a8565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b1580156108c557600080fd5b505af11580156108d9573d6000803e3d6000fd5b5050505050565b600067ffffffffffffffff821115610924576040517f35278d1200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5090565b60005473ffffffffffffffffffffffffffffffffffffffff163314610458576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610763565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610a0257600080fd5b5035919050565b600060208284031215610a1b57600080fd5b813567ffffffffffffffff81168114610a3357600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461077557600080fd5b600060208284031215610a6e57600080fd5b8135610a3381610a3a565b600060208284031215610a8b57600080fd5b8151610a3381610a3a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b67ffffffffffffffff828116828216039080821115610ae657610ae6610a96565b5092915050565b8082028115828204841417610b0457610b04610a96565b9291505056fea26469706673582212208c29e7fca037a75f151ff33b40b688c544be23ca212982766de2ae45ef54e93364736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c80638da5cb5b11610081578063d1d58b251161005b578063d1d58b25146101c4578063f2fde38b146101d7578063f7c618c1146101ea57600080fd5b80638da5cb5b1461014b578063a694fc3a1461018a578063b48509e61461019d57600080fd5b80633e10e551116100b25780633e10e551146100f65780634d8d9e9214610109578063715018a61461014357600080fd5b80632e17de78146100ce578063379607f5146100e3575b600080fd5b6100e16100dc3660046109f0565b610211565b005b6100e16100f13660046109f0565b61034e565b6100e1610104366004610a09565b6103a7565b6101307f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100e1610446565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161013a565b6100e16101983660046109f0565b61045a565b6101657f000000000000000000000000000000000000000000000000000000000000000081565b6101306101d23660046109f0565b6105a8565b6100e16101e5366004610a5c565b61070f565b6101657f000000000000000000000000000000000000000000000000000000000000000081565b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101829052339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa15801561029e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c29190610a79565b73ffffffffffffffffffffffffffffffffffffffff161461030f576040517f4ab4e95e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61031881610778565b600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000169055565b61035781610778565b610360426108e0565b60009182526001602052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff909216919091179055565b6103af610928565b8067ffffffffffffffff164211156103f3576040517fe00c687700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805467ffffffffffffffff90921674010000000000000000000000000000000000000000027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b61044e610928565b610458600061097b565b565b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101829052339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa1580156104e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050b9190610a79565b73ffffffffffffffffffffffffffffffffffffffff1614610558576040517f4ab4e95e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526001602052604090205467ffffffffffffffff1615610357576040517f9c96118800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806105b4426108e0565b60008481526001602052604081205491925067ffffffffffffffff9091169081900361060c576040517fda70723f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005467ffffffffffffffff74010000000000000000000000000000000000000000909104811690831611156106e45760005467ffffffffffffffff74010000000000000000000000000000000000000000909104811690821610156106da576000547f0000000000000000000000000000000000000000000000000000000000000000906106be90839074010000000000000000000000000000000000000000900467ffffffffffffffff16610ac5565b67ffffffffffffffff166106d29190610aed565b949350505050565b5060009392505050565b7f00000000000000000000000000000000000000000000000000000000000000006106be8284610ac5565b610717610928565b73ffffffffffffffffffffffffffffffffffffffff811661076c576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b6107758161097b565b50565b6040517f6352211e0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116916340c10f19917f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa15801561082d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108519190610a79565b61085a846105a8565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b1580156108c557600080fd5b505af11580156108d9573d6000803e3d6000fd5b5050505050565b600067ffffffffffffffff821115610924576040517f35278d1200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5090565b60005473ffffffffffffffffffffffffffffffffffffffff163314610458576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610763565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610a0257600080fd5b5035919050565b600060208284031215610a1b57600080fd5b813567ffffffffffffffff81168114610a3357600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461077557600080fd5b600060208284031215610a6e57600080fd5b8135610a3381610a3a565b600060208284031215610a8b57600080fd5b8151610a3381610a3a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b67ffffffffffffffff828116828216039080821115610ae657610ae6610a96565b5092915050565b8082028115828204841417610b0457610b04610a96565b9291505056fea26469706673582212208c29e7fca037a75f151ff33b40b688c544be23ca212982766de2ae45ef54e93364736f6c63430008170033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "claim(uint256)": {
        "params": {
          "_tokenId": "The id of the NFT to claim tokens for."
        }
      },
      "claimable(uint256)": {
        "params": {
          "_tokenId": "The id of the NFT to check claimable tokens."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setStakingEnd(uint64)": {
        "params": {
          "_stakingOver": "The enddate."
        }
      },
      "stake(uint256)": {
        "params": {
          "_tokenId": "The id of the NFT to stake."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstake(uint256)": {
        "params": {
          "_tokenId": "The id of the NFT to unstake."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(uint256)": {
        "notice": "Claims all claimable tokens.Can be called by any wallet, but tokens will be claimed to NFT owner."
      },
      "claimable(uint256)": {
        "notice": "Checks how much tokens are claimable."
      },
      "setStakingEnd(uint64)": {
        "notice": "Set enddate for rewards. No new rewards are stacked up after this date.Rewards stacked up until this date can still be claimed."
      },
      "stake(uint256)": {
        "notice": "Stakes your NFT."
      },
      "unstake(uint256)": {
        "notice": "Unstakes your NFT."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 387,
        "contract": "contracts/VerifiedContributorStaking.sol:VerifiedContributorStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10787,
        "contract": "contracts/VerifiedContributorStaking.sol:VerifiedContributorStaking",
        "label": "stakingOver",
        "offset": 20,
        "slot": "0",
        "type": "t_uint64"
      },
      {
        "astId": 10791,
        "contract": "contracts/VerifiedContributorStaking.sol:VerifiedContributorStaking",
        "label": "lastClaim",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint64)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_uint64)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}